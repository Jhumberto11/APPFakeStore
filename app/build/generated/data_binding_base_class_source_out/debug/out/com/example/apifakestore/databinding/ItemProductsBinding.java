// Generated by view binder compiler. Do not edit!
package com.example.apifakestore.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.apifakestore.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemProductsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cardviewProduct;

  @NonNull
  public final ConstraintLayout constraintLayoutProduct;

  @NonNull
  public final ImageView imageViewProduct;

  @NonNull
  public final TextView textViewProductName;

  @NonNull
  public final TextView tvCategorieProduct;

  @NonNull
  public final TextView tvPriceProduct;

  private ItemProductsBinding(@NonNull ConstraintLayout rootView, @NonNull CardView cardviewProduct,
      @NonNull ConstraintLayout constraintLayoutProduct, @NonNull ImageView imageViewProduct,
      @NonNull TextView textViewProductName, @NonNull TextView tvCategorieProduct,
      @NonNull TextView tvPriceProduct) {
    this.rootView = rootView;
    this.cardviewProduct = cardviewProduct;
    this.constraintLayoutProduct = constraintLayoutProduct;
    this.imageViewProduct = imageViewProduct;
    this.textViewProductName = textViewProductName;
    this.tvCategorieProduct = tvCategorieProduct;
    this.tvPriceProduct = tvPriceProduct;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemProductsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemProductsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_products, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemProductsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardviewProduct;
      CardView cardviewProduct = ViewBindings.findChildViewById(rootView, id);
      if (cardviewProduct == null) {
        break missingId;
      }

      ConstraintLayout constraintLayoutProduct = (ConstraintLayout) rootView;

      id = R.id.imageViewProduct;
      ImageView imageViewProduct = ViewBindings.findChildViewById(rootView, id);
      if (imageViewProduct == null) {
        break missingId;
      }

      id = R.id.textViewProductName;
      TextView textViewProductName = ViewBindings.findChildViewById(rootView, id);
      if (textViewProductName == null) {
        break missingId;
      }

      id = R.id.tvCategorieProduct;
      TextView tvCategorieProduct = ViewBindings.findChildViewById(rootView, id);
      if (tvCategorieProduct == null) {
        break missingId;
      }

      id = R.id.tvPriceProduct;
      TextView tvPriceProduct = ViewBindings.findChildViewById(rootView, id);
      if (tvPriceProduct == null) {
        break missingId;
      }

      return new ItemProductsBinding((ConstraintLayout) rootView, cardviewProduct,
          constraintLayoutProduct, imageViewProduct, textViewProductName, tvCategorieProduct,
          tvPriceProduct);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
